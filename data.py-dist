# Configuration file, to be adapted to one's needs

from typing import Any, Dict, TYPE_CHECKING

import legacycrypt as crypt     # type: ignore
import os

if TYPE_CHECKING:
    from lib.typing import IsoImageDef

# Default user and password to connect to a host through XAPI
# Note: this won't be used for SSH.
# You need to have an SSH key into the hosts' /root/.ssh/authorized_keys.
HOST_DEFAULT_USER = "root"
HOST_DEFAULT_PASSWORD = ""

def hash_password(password):
    """Hash password for /etc/password."""
    salt = crypt.mksalt(crypt.METHOD_SHA512)
    return crypt.crypt(password, salt)

HOST_DEFAULT_PASSWORD_HASH = hash_password(HOST_DEFAULT_PASSWORD)

# Public key for a private key available to the test runner
TEST_SSH_PUBKEY = """
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMnN/wVdQqHA8KsndfrLS7fktH/IEgxoa533efuXR6rw XCP-ng CI
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKz9uQOoxq6Q0SQ0XTzQHhDolvuo/7EyrDZsYQbRELhcPJG8MT/o5u3HyJFhIP2+HqBSXXgmqRPJUkwz9wUwb2sUwf44qZm/pyPUWOoxyVtrDXzokU/uiaNKUMhbnfaXMz6Ogovtjua63qld2+ZRXnIgrVtYKtYBeu/qKGVSnf4FTOUKl1w3uKkr59IUwwAO8ay3wVnxXIHI/iJgq6JBgQNHbn3C/SpYU++nqL9G7dMyqGD36QPFuqH/cayL8TjNZ67TgAzsPX8OvmRSqjrv3KFbeSlpS/R4enHkSemhgfc8Z2f49tE7qxWZ6x4Uyp5E6ur37FsRf/tEtKIUJGMRXN XCP-ng CI
"""

# The following prefix will be added to the `name-label` parameter of XAPI objects
# that the tests will create or import, such as VMs and SRs.
# Default value: [your login/user]
# OBJECTS_NAME_PREFIX = "[TEST]"
OBJECTS_NAME_PREFIX = None

# Override settings for specific hosts
# skip_xo_config allows to not touch XO's configuration regarding the host
# Else the default behaviour is to add the host to XO servers at the beginning
# of the testing session and remove it at the end.
HOSTS: Dict[str, Dict[str, Any]] = {
#    "10.0.0.1": {"user": "root", "password": ""},
#    "testhost1": {"user": "root", "password": "", 'skip_xo_config': True},
}

NETWORKS = {
    "MGMT": "Pool-wide network associated with eth0",
}

# PXE config server for automated XCP-ng installation
PXE_CONFIG_SERVER = 'pxe'

# Default VM images location
DEF_VM_URL = 'http://pxe/images/'

# Guest tools ISO download location
ISO_DOWNLOAD_URL = 'http://pxe/isos/'

# Definitions of Windows guest tool ISOs to be tested
WIN_GUEST_TOOLS_ISOS = {
    "stable": {
        # ISO name on SR or subpath of ISO_DOWNLOAD_URL
        "name": "guest-tools-win.iso",
        # Whether ISO should be downloaded from ISO_DOWNLOAD_URL
        "download": True,
        # ISO-relative path of MSI file to be installed
        "package": "package\\XenDrivers-x64.msi",
        # ISO-relative path of XenClean script
        "xenclean_path": "package\\XenClean\\x64\\Invoke-XenClean.ps1",
        # ISO-relative path of root cert file to be installed before guest tools (optional)
        "testsign_cert": "testsign\\XCP-ng_Test_Signer.crt",
    },
    # Add more guest tool ISOs here as needed
}

# Definition of ISO containing other guest tools to be tested
OTHER_GUEST_TOOLS_ISO = {
    "name": "other-guest-tools-win.iso",
    "download": False,
}

# Definitions of other guest tools contained in OTHER_GUEST_TOOLS_ISO
OTHER_GUEST_TOOLS = {
    "xcp-ng-9.0.9000": {
        # Whether we are installing MSI files ("msi"), bare .inf drivers ("inf")
        # or nothing in case of Windows Update (absent or null)
        "type": "msi",
        # ISO-relative path of this guest tool
        "path": "xcp-ng-9.0.9000",
        # "path"-relative path of MSI or driver files to be installed
        "package": "package\\XenDrivers-x64.msi",
        # Relative path of root cert file (optional)
        "testsign_cert": "testsign\\XCP-ng_Test_Signer.crt",
        # Whether this guest tool version wants vendor device to be activated (optional, defaults to False)
        # Note: other guest tools may not install correctly with this setting enabled
        "vendor_device": False,

        # Can we upgrade automatically from this guest tool to our tools?
        "upgradable": True,
    },
    "vendor": {
        "vendor_device": True,
        "upgradable": False,
    },
}

# Tools
TOOLS: Dict[str, str] = {
#    "iso-remaster": "/home/user/src/xcpng/xcp/scripts/iso-remaster/iso-remaster.sh",
}

# Values can be either full URLs or only partial URLs that will be automatically appended to DEF_VM_URL
VM_IMAGES = {
    'mini-linux-x86_64-bios': 'alpine-minimal-3.12.0.xva',
    'mini-linux-x86_64-uefi': 'alpine-uefi-minimal-3.12.0.xva'
}

ISO_IMAGES_BASE = "https://updates.xcp-ng.org/isos/"
ISO_IMAGES_CACHE = "/home/user/iso"
# ISO_IMAGES path can be:
# - absolute filename
# - absolute URL
# - path relative to ISO_IMAGES_BASE URL
# Note the dirname part is ignored when looking in ISO_IMAGES_CACHE, abuse this
# for local-only ISO with things like "locally-built/my.iso" or "xs/8.3.iso"
ISO_IMAGES: Dict[str, "IsoImageDef"] = {
    '83nightly': {'path': os.environ.get("XCPNG83_NIGHTLY",
                                         "http://unconfigured.iso"),
                  'unsigned': True},
    '83rc1': {'path': "8.3/xcp-ng-8.3.0-rc1.iso"},
    '83b2': {'path': "8.3/xcp-ng-8.3.0-beta2.iso"},
    '83b1': {'path': "8.3/xcp-ng-8.3.0-beta1.iso"},
    '821.1': {'path': "8.2/xcp-ng-8.2.1-20231130.iso"},
    '821': {'path': "8.2/xcp-ng-8.2.1.iso"},
    '820': {'path': "8.2/xcp-ng-8.2.0.iso"},
}

# In some cases, we may prefer to favour a local SR to store test VM disks,
# to avoid latency or unstabilities related to network or shared file servers.
# However it's not good practice to make a local SR the default SR for a pool of several hosts.
# Hence this configuration value that you can set to `local` so that our tests use this SR by default.
# This setting affects VMs managed by the `imported_vm` fixture.
# Possible values:
# - 'default': keep using the pool's default SR
# - 'local': use the first local SR found instead
# - A UUID of the SR to be used
DEFAULT_SR = 'default'

# Whether to cache VMs on the test host, that is import them only if not already
# present in the target SR. This also causes the VM to be cloned at the beginning
# of each test module, so that the original VM remains untouched.
# /!\ The VM identifier in cache is simply the URL where it was imported from.
# No checksum or date is checked.
# A cached VM is just a VM which has a special description.
# Example description: "[Cache for http://example.com/images/filename.xva]"
# Delete the VM to remove it from cache.
# This setting affects VMs managed by the `imported_vm` fixture.
CACHE_IMPORTED_VM = False

# Default NFS device config:
NFS_DEVICE_CONFIG: Dict[str, Dict[str, str]] = {
#    'server': '10.0.0.2', # URL/Hostname of NFS server
#    'serverpath': '/path/to/shared/mount' # Path to shared mountpoint
}

# Default NFS4+ only device config:
NFS4_DEVICE_CONFIG: Dict[str, Dict[str, str]] = {
#    'server': '10.0.0.2', # URL/Hostname of NFS server
#    'serverpath': '/path_to_shared_mount' # Path to shared mountpoint
#    'nfsversion': '4.1'
}

# Default NFS ISO device config:
NFS_ISO_DEVICE_CONFIG: Dict[str, Dict[str, str]] = {
#    'location': '10.0.0.2:/path/to/shared/mount' # URL/Hostname of NFS server and path to shared mountpoint
}

# Default CIFS ISO device config:
CIFS_ISO_DEVICE_CONFIG: Dict[str, Dict[str, str]] = {
#    'location': r'\\10.0.0.2\<shared folder name>',
#    'username': '<user>',
#    'cifspassword': '<password>',
#    'type': 'cifs',
#    'vers': '<1.0> or <3.0>'
}

CEPHFS_DEVICE_CONFIG: Dict[str, Dict[str, str]] = {
#    'server': '10.0.0.2',
#    'serverpath': '/vms'
}

MOOSEFS_DEVICE_CONFIG: Dict[str, Dict[str, str]] = {
#    'masterhost': 'mfsmaster',
#    'masterport': '9421',
#    'rootpath': '/vms'
}

LVMOISCSI_DEVICE_CONFIG: Dict[str, Dict[str, str]] = {
#    'target': '192.168.1.1',
#    'port': '3260',
#    'targetIQN': 'target.example',
#    'SCSIid': 'id'
}

BASE_ANSWERFILES = dict(
    INSTALL={
        "TAG": "installation",
        "CONTENTS": (
            {"TAG": "root-password",
             "type": "hash",
             "CONTENTS": HOST_DEFAULT_PASSWORD_HASH},
            {"TAG": "timezone",
             "CONTENTS": "Europe/Paris"},
            {"TAG": "keymap",
             "CONTENTS": "us"},
        ),
    },
    UPGRADE={
        "TAG": "installation",
        "mode": "upgrade",
    },
)

IMAGE_EQUIVS: Dict[str, str] = {
#    'install.test::Nested::install[bios-83rc1-ext]-vm1-607cea0c825a4d578fa5fab56978627d8b2e28bb':
#    'install.test::Nested::install[bios-83rc1-ext]-vm1-addb4ead4da49856e1d2fb3ddf4e31027c6b693b',
}

# compatibility settings for older tests
DEFAULT_NFS_DEVICE_CONFIG = NFS_DEVICE_CONFIG
DEFAULT_NFS4_DEVICE_CONFIG = NFS4_DEVICE_CONFIG
DEFAULT_NFS_ISO_DEVICE_CONFIG = NFS_ISO_DEVICE_CONFIG
DEFAULT_CIFS_ISO_DEVICE_CONFIG = CIFS_ISO_DEVICE_CONFIG
DEFAULT_CEPHFS_DEVICE_CONFIG = CEPHFS_DEVICE_CONFIG
DEFAULT_MOOSEFS_DEVICE_CONFIG = MOOSEFS_DEVICE_CONFIG
DEFAULT_LVMOISCSI_DEVICE_CONFIG = LVMOISCSI_DEVICE_CONFIG
